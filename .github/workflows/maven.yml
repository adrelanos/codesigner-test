# The name of the workflow.
name: Sign Test

# Trigger this workflow on a push
on: [push]

# Create an environment variable
env:
  PROJECT_NAME: HelloWorld
  PROJECT_VERSION: 0.0.1

# Defines a single job named "build-and-sign-jar"
jobs:
  build-and-sign-jar:
    env:
        # https://github.com/SSLcom/esigner-codesign/issues/4#issuecomment-1631541528
        # https://github.com/SSLcom/ci-images/blob/main/.env
        USERNAME: "esigner_demo"
        PASSWORD: "esignerDemo#1"
        CREDENTIAL_ID: "8b072e22-7685-4771-b5c6-48e46614915f"
        TOTP_SECRET: "RDXYgV9qju+6/7GnMf1vCbKexXVJmUVr+86Wq/8aIGg="
        ENVIRONMENT_NAME: TEST
        # https://github.com/SSLcom/ci-images/blob/main/codesign-tool/conf/code_sign_tool_demo.properties
        CLIENT_ID: qOUeZCCzSqgA93acB3LYq6lBNjgZdiOxQc-KayC3UMw
        OAUTH2_ENDPOINT: https://oauth-sandbox.ssl.com/oauth2/token
        CSC_API_ENDPOINT: https://cs-try.ssl.com
        TSA_URL: http://ts.ssl.com
    runs-on: ubuntu-latest
    name: CodeSigner Test
    steps:
      # 1) Check out the source code so that the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 3) Create Artifact Directory to store signed and unsigned artifact files
      - name: Create Artifacts Directory
        shell: bash
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          mkdir ${GITHUB_WORKSPACE}/packages

      # 4) Build a maven project or solution and all of its dependencies.
      #    After it has been created jar file, copy to 'packages' folder for siging
      - name: Compile Java Library with Maven
        shell: bash
        run: |
          cp /usr/bin/cat ${GITHUB_WORKSPACE}/packages/${{env.PROJECT_NAME}}.jar

      # 5) This is the step where the created JAR (artifact) files will be signed with CodeSignTool.
      - name: Sign Artifact with CodeSignTool
        uses: sslcom/esigner-codesign@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.ES_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.ES_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
          file_path: ${GITHUB_WORKSPACE}/packages/${{env.PROJECT_NAME}}.jar
          # Directory where signed code object(s) will be written.
          output_path: ${GITHUB_WORKSPACE}/artifacts
          # Scan code before sign
          malware_block: false
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: TEST

        # 6) This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete
      - name: Upload Signed Files
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_NAME}}-${{env.PROJECT_VERSION}}.jar
          path: ./artifacts/${{env.PROJECT_NAME}}.jar
